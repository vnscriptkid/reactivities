{"version":3,"sources":["app/models/Pagination.ts","app/api/agent.ts","app/models/Activity.ts","app/models/Profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/Loading.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PaginationParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","response","use","a","headers","JSON","parse","console","log","Promise","reject","request","config","token","store","commonStore","Authorization","getResponseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","values","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMain","photoId","deletePhoto","toggleFollowing","getFollowingsOrFollowers","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","user","displayName","image","ActivityStore","activityRegistry","Map","initialLoading","selectedActivity","loading","paginationParams","set","setPaginationParams","setPredicate","key","value","clearPredicates","forEach","loadActivities","setInitialLoading","axiosParams","result","setActivity","setPagination","error","Date","userStore","isHost","hostUsername","isGoing","profiles","some","p","host","find","loadActivity","has","runInAction","state","setSelectedActivity","selectActivity","unselectActivity","setLoading","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","isCancelled","filter","newAttendee","push","clearSelectedActivity","updateAttendeeFollowing","following","profile","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","sort","b","getTime","grouped","format","entries","ProfilesStore","uploading","followings","followersLoading","activeTab","userActivities","loadingActivities","setActiveTab","tab","loadProfile","photo","photos","isMain","setImage","setMainPhoto","activityStore","loadUserActivities","UserStore","fbAccessToken","fbLoading","setToken","history","modalStore","closeModal","window","FB","loginWithFbToken","catch","err","finally","authResponse","scope","getFbLoginStatus","getLoginStatus","status","logout","getUser","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","disabled","Card","Header","extra","Icon","attendees","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","Description","secondary","clearing","floated","groupedActivites","activities","sub","divided","vertical","marginTop","active","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingMore","setLoadingMore","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","LoginForm","validationSchema","Yup","email","required","password","initialValues","onSubmit","setErrors","handleSubmit","isValid","isSubmitting","errors","className","autoComplete","placeholder","type","render","RegisterForm","dirty","isLoggedIn","Divider","Loading","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","Extra","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","setAddPhotoMode","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","targetId","setTargetId","event","currentTarget","includes","handleSetMainPhoto","handleDeletePhoto","menuPosition","StatisticGroup","Statistic","followingCount","PrivateRoute","Component","component","rest","useLocation","path","HomePage","ActivityDashboard","ActivityDetails","ProfilePage","ActivityForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.541ff098.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number,\r\n    itemsPerPage: number,\r\n    totalItems: number,\r\n    totalPages: number\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PaginationParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosResponse } from 'axios';\r\nimport { Activity, ActivityFormValues } from '../models/Activity';\r\nimport { PaginatedResult } from '../models/Pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/Profile';\r\nimport { User, UserFormValues } from '../models/User';\r\nimport { store } from '../stores/store';\r\n\r\nfunction sleep (delay: number) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.response.use(async response => {\r\n    try {\r\n        if (process.env.NODE_ENV === 'development') await sleep(500);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return await Promise.reject(error);\r\n    }\r\n})\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\nconst getResponseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(getResponseBody),\r\n    post: <T> (url: string, body = {}) => axios.post<T>(url, body).then(getResponseBody),\r\n    put: <T> (url: string, body = {}) => axios.put<T>(url, body).then(getResponseBody),\r\n    delete: <T> (url: string) => axios.delete(url).then<T>(getResponseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(getResponseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`)\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (values: UserFormValues) => requests.post<User>('/account/login', values),\r\n    register: (values: UserFormValues) => requests.post<User>('/account/register', values),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();   \r\n        formData.append('File', file);\r\n        return axios.post<Photo>('/photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        });\r\n    },\r\n    setMain: (photoId: string) => requests.post(`/photos/${photoId}/setmain`),\r\n    deletePhoto: (photoId: string) => requests.delete(`/photos/${photoId}`),\r\n    toggleFollowing: (username: string) => requests.post(`/follow/${username}`),\r\n    getFollowingsOrFollowers: (username: string, predicate: \"following\" | \"followers\") => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean,\r\n    isHost: boolean,\r\n    host?: Profile,\r\n    profiles: Profile[]\r\n} \r\n\r\nexport class Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./User\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    bio?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n    following: boolean;\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/Activity\";\r\nimport { Pagination, PaginationParams } from \"../models/Pagination\";\r\nimport { Profile } from \"../models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map<string, Activity>();\r\n    initialLoading = false;\r\n    selectedActivity: Activity | undefined = undefined;\r\n    loading = false;\r\n    pagination: Pagination | null = null;\r\n    paginationParams = new PaginationParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.paginationParams = new PaginationParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPaginationParams = (params: PaginationParams) => {\r\n        this.paginationParams = params;\r\n    }\r\n\r\n    setPredicate = (key: string, value: string | Date) => {\r\n        const clearPredicates = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        }\r\n        \r\n        switch (key) {\r\n            case 'all':\r\n                clearPredicates();\r\n                this.predicate.set('all', value);\r\n                break;\r\n            case 'isHost':\r\n                clearPredicates();\r\n                this.predicate.set('isHost', value);\r\n                break;\r\n            case 'isGoing':\r\n                clearPredicates();\r\n                this.predicate.set('isGoing', value);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate'); // detect changes by key\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageSize', this.paginationParams.pageSize.toString());\r\n        params.append('pageNumber', this.paginationParams.pageNumber.toString());\r\n\r\n        if (!this.predicate.has('all')) {\r\n            if (this.predicate.has('isHost')) params.append('ishost', this.predicate.get('isHost').toString());\r\n\r\n            else if (this.predicate.has('isGoing')) params.append('isgoing', this.predicate.get('isGoing').toString());\r\n        }\r\n\r\n        if (this.predicate.has('startDate')) params.append('startdate', (this.predicate.get('startDate') as Date).toISOString());\r\n        \r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate () {\r\n        return Array.from(this.activityRegistry.values())\r\n                .sort((a, b) => b.date!.getTime() - a.date!.getTime());\r\n    }\r\n\r\n    get groupedActivites () {\r\n        const grouped: {[key: string]: Activity[]} = {};\r\n\r\n        Array.from(this.activityRegistry.values()).forEach(activity => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');            \r\n            if (!grouped[date]) grouped[date] = [];\r\n            grouped[date].push(activity);\r\n        });\r\n\r\n        return Object.entries(grouped)\r\n                    .sort((a, b) => Date.parse(b[0]) - Date.parse(a[0]));\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setInitialLoading(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(a => this.setActivity(a));\r\n            this.setPagination(result.pagination);\r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    setPagination(pagination: Pagination) {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setActivity = (activity: Activity) => {\r\n        activity.date = new Date(activity.date!);\r\n        \r\n        const user = store.userStore.user;;\r\n        if (user) {\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.isGoing = activity.profiles?.some(p => p.username === user.username);\r\n            activity.host = activity.profiles?.find(p => p.username === activity.hostUsername);\r\n        }\r\n        \r\n\r\n        this.activityRegistry.set(activity.id, activity);\r\n        return activity;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        if (this.activityRegistry.has(id)) {\r\n            this.selectedActivity = this.activityRegistry.get(id);\r\n            return this.selectedActivity;\r\n        }\r\n        \r\n        try {\r\n            this.setInitialLoading(true);\r\n            const activity = await agent.Activities.details(id);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = this.setActivity(activity);\r\n            })\r\n\r\n            return activity;\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    setInitialLoading = (state: boolean) => {\r\n        this.initialLoading = state;\r\n    }\r\n\r\n    private setSelectedActivity = (activity: Activity | undefined) => {\r\n        this.selectedActivity = activity;\r\n    }\r\n\r\n    selectActivity = (id: string) => {\r\n        this.setSelectedActivity(this.activityRegistry.get(id));\r\n    }\r\n\r\n    unselectActivity = () => {\r\n        this.setSelectedActivity(undefined);\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity)\r\n            newActivity.hostUsername = user?.username!;\r\n            newActivity.isHost = true;\r\n            newActivity.host = attendee;\r\n            newActivity.profiles = [attendee];\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id!, newActivity);\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                Object.assign(this.selectedActivity, activity);\r\n                this.activityRegistry.set(activity.id!, this.selectedActivity!);\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(id);\r\n\r\n            runInAction(() => {\r\n                const user = store.userStore.user;\r\n                if (!user || !this.selectedActivity) return;\r\n\r\n                if (this.selectedActivity.isHost) {\r\n                    // cancel or uncancel\r\n                    this.selectedActivity.isCancelled = !this.selectedActivity.isCancelled;\r\n                    this.activityRegistry.set(id, this.selectedActivity);\r\n                } else if (this.selectedActivity.isGoing) {\r\n                    // leave activty \r\n                    this.selectedActivity.profiles = this.selectedActivity.profiles?.filter(\r\n                        p => p.username !== user.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    // join activity \r\n                    const newAttendee = new Profile(user);\r\n                    this.selectedActivity.profiles?.push(newAttendee);\r\n                    this.selectedActivity.isGoing = true;\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string, following: boolean) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.profiles.forEach(profile => {\r\n                if (profile.username === username) {\r\n                    profile.following = following;\r\n                    following ? profile.followersCount++ : profile.followersCount--;\r\n                }\r\n            })\r\n        });\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfilesStore {\r\n    profile: Profile | null = null;\r\n    loading = false;\r\n    uploading = false;\r\n    initialLoading = false;\r\n    followings: Profile[] = []; // either followings or followers\r\n    followersLoading = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.getFollowingsOrFollowers(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;   \r\n    }\r\n\r\n    setActiveTab = (tab: any) => {\r\n        this.activeTab = tab;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.initialLoading = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile);\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.initialLoading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                this.profile?.photos?.push(photo);\r\n                if (photo.isMain) store.userStore.setImage(photo.url);\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMain(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos && store.userStore.user) {\r\n                    store.userStore.setImage(photo.url);\r\n                    this.profile.image = photo.url;\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            \r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    toggleFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.toggleFollowing(username);\r\n            \r\n            store.activityStore.updateAttendeeFollowing(username, following);\r\n            \r\n            runInAction(() => {\r\n\r\n                if (this.profile?.username !== store.userStore.user?.username) {\r\n                    if (this.profile?.username === username) {\r\n                        this.profile.following = following;\r\n                        following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    }\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === store.userStore.user?.username) {\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                    }\r\n\r\n                    if (profile.username === username) {\r\n                        profile.following = following;\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                    }\r\n                });\r\n            })\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    getFollowingsOrFollowers = async (predicate: \"following\" | \"followers\") => {\r\n        if (!this.profile) return;\r\n\r\n        this.followersLoading = true;\r\n\r\n        try {\r\n            const profiles = await agent.Profiles.getFollowingsOrFollowers(this.profile.username, predicate);\r\n            \r\n            runInAction(() => {\r\n                switch (predicate) {\r\n                    case \"followers\":\r\n                        this.followings = profiles;\r\n                        break;\r\n                    case \"following\":\r\n                        this.followings = profiles;\r\n                        break;\r\n                }\r\n            })\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.followersLoading = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const userActivities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => this.userActivities = userActivities);\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (values: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(values);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    fbLogin = async () => {\r\n        if (!window.FB) return;\r\n\r\n        this.fbLoading = true;\r\n\r\n        const loginWithFbToken = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => this.user = user);\r\n                history.push('/activities');\r\n            }).catch(err => {\r\n                console.error(err);\r\n                throw err;\r\n            }).finally(() => {\r\n                this.fbLoading = false;\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            // https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus/\r\n            // The user is logged into Facebook and has authorized your application\r\n            loginWithFbToken(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                loginWithFbToken(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'});\r\n        }\r\n    }\r\n\r\n    getFbLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        });\r\n    }\r\n\r\n    register = async (values: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(values);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image; \r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfilesStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore,\r\n    userStore: UserStore,\r\n    commonStore: CommonStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfilesStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    userStore: new UserStore(),\r\n    commonStore: new CommonStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfilesStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setToken = (token : string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/Comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start()\r\n                .catch(err => console.error(\"Err while establishing connection to chat hub: \", err));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => comment.createdAt = new Date(comment.createdAt + 'Z'))\r\n                    this.comments = comments\r\n                });\r\n            });\r\n            \r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop()\r\n            .catch(err => console.error('Err stopping chat hub connection: ', err));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.stopHubConnection();\r\n        this.comments = [];\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n} ","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nfunction NavBar() {\r\n    const {userStore: { user, logout }} = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }}/>\r\n                    Reactivites\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default observer(NavBar);","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/Profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction FollowButton({profile}: Props) {\r\n\r\n    const {userStore, profileStore} = useStore();\r\n\r\n    const {user} = userStore;\r\n    const {toggleFollowing, loading} = profileStore;\r\n\r\n    if (user?.username === profile?.username) return null;\r\n\r\n    function handleClick(e: SyntheticEvent) {\r\n        e.preventDefault();\r\n        toggleFollowing(profile.username, !profile.following);\r\n    }\r\n    \r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile?.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button \r\n                    basic\r\n                    fluid\r\n                    onClick={handleClick}\r\n                    loading={loading}\r\n                    disabled={loading}\r\n                    color={profile?.following ? 'red' : 'green'} \r\n                    content={profile?.following ? 'Unfollow' : 'Follow'} />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n}\r\n\r\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/Profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileCard({ profile }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Header>Bio goes here</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile?.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/Profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    };\r\n    \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                src={attendee.image || '/assets/user.png'}  />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee);","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/Activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityListItem({activity} : Props) {\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' \r\n                            circular src={activity?.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by {activity.hostUsername}</Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>    \r\n                </Item.Group>                \r\n            </Segment>\r\n\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.profiles!} />\r\n            </Segment>\r\n\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n\r\nexport default ActivityListItem;","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header, Item, Segment } from 'semantic-ui-react';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupedActivites } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivites.map(([ date, activities ]) => (\r\n                <Fragment key={date}>\r\n                    <Header sub color='teal'>\r\n                        {date}\r\n                    </Header>\r\n                    <Segment>\r\n                        <Item.Group divided>\r\n                            {activities.map((activity) => (\r\n                                <ActivityListItem key={activity.id} activity={activity}/>\r\n                            ))}\r\n                        </Item.Group>\r\n                    </Segment>\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityList);","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nfunction ActivityFilters() {\r\n\r\n    const {activityStore: { predicate, setPredicate }} = useStore();\r\n    \r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 27}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item  \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                    content='All Activities' />\r\n                <Menu.Item  \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                    content=\"I'm going\" />\r\n                <Menu.Item  \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityFilters);","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PaginationParams } from '../../../app/models/Pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nfunction ActivityDashboard() {\r\n\r\n    const { activityStore  } = useStore();\r\n    const { loadActivities, activityRegistry, pagination, setPaginationParams } = activityStore;\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    \r\n    useEffect(() => { \r\n        if (activityRegistry.size < 2) {\r\n            loadActivities();\r\n        }\r\n    }, [loadActivities, activityRegistry]);\r\n\r\n    function handleLoadMore() {\r\n        setLoadingMore(true);\r\n        setPaginationParams(new PaginationParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingMore(false));\r\n    }\r\n  \r\n    // if (activityStore.initialLoading && !loadingMore) return <Loading />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                {activityStore.initialLoading && !loadingMore ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleLoadMore}\r\n                        hasMore={!loadingMore && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingMore} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nfunction MyTextInput(props: Props) {\r\n    const [ field, meta ] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Formik } from 'formik';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction LoginForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().required('Email is required').email('Invalid email'),\r\n        password: Yup.string().required('Password is required'),\r\n    });\r\n    \r\n    return (\r\n        <Formik \r\n            validationSchema={validationSchema} \r\n            initialValues={{ email: '', password: '', error: null }} \r\n            onSubmit={(values, {setErrors}) => userStore\r\n                .login(values)\r\n                .catch(e => setErrors({ error: 'Invalid email or password' })) }\r\n        >\r\n            {({ handleSubmit, isValid, touched, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n                    <ErrorMessage  name='error' render={() => (\r\n                        <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />\r\n                    )} />\r\n                    <Button \r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !touched || isSubmitting} \r\n                        positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import { Formik } from 'formik';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction RegisterForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().required('Email is required').email('Invalid email'),\r\n        password: Yup.string().required('Password is required'),\r\n        displayName: Yup.string().required('Display name is required'),\r\n        username: Yup.string().required('Username is required'),\r\n    });\r\n    \r\n    return (\r\n        <Formik \r\n            validationSchema={validationSchema} \r\n            initialValues={{ email: '', password: '', username: '', displayName: '', error: null }} \r\n            onSubmit={(values, {setErrors}) => userStore\r\n                .register(values)\r\n                .catch(error => setErrors({ error })) }\r\n        >\r\n            {({ handleSubmit, isValid, dirty, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\"/>\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\"/>\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n\r\n                    {/*\r\n                    TODO: Display validation errors\r\n                     <ErrorMessage name='error' render={() => (\r\n                        <ValidationErrors errors={errors.error} />\r\n                    )} /> */}\r\n                    \r\n                    <Button \r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Header,\r\n  Segment,\r\n  Image,\r\n  Button,\r\n  Divider,\r\n} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nfunction HomePage() {\r\n  const {\r\n    userStore,\r\n    modalStore: { openModal },\r\n  } = useStore();\r\n\r\n  return (\r\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n      <Container text>\r\n        <Header as=\"h1\" inverted>\r\n          <Image\r\n            size=\"massive\"\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n          Reactivities\r\n        </Header>\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n              Take me Activities\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              onClick={() => openModal(<LoginForm />)}\r\n              size=\"huge\"\r\n              inverted\r\n            >\r\n              Login\r\n            </Button>\r\n            <Button\r\n              onClick={() => openModal(<RegisterForm />)}\r\n              size=\"huge\"\r\n              inverted\r\n            >\r\n              Register\r\n            </Button>\r\n            <Divider horizontal inverted>\r\n              Or\r\n            </Divider>\r\n            <Button\r\n              size=\"huge\"\r\n              inverted\r\n              color=\"facebook\"\r\n              content=\"Login With Facebook\"\r\n              loading={userStore.fbLoading}\r\n              onClick={userStore.fbLogin}\r\n            />\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default observer(HomePage);\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nfunction Loading({ inverted=true, content='Loading...' } : Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n}\r\n\r\nexport default Loading;","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextArea(props: Props) {\r\n    const [ field, meta ] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextArea;","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nfunction MySelectInput(props: Props) {\r\n    const [ field, meta, helpers ] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from \"formik\";\r\nimport ReactDatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\nfunction MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [ field, meta, helpers ] = useField(props.name!);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <ReactDatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyDateInput;","import {useState, useEffect} from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, Formik } from 'formik';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport { ActivityFormValues } from '../../../app/models/Activity';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport Loading from '../../../app/layout/Loading';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\nfunction ActivityForm() {\r\n    \r\n    const { activityStore } = useStore();\r\n    const { initialLoading, createActivity, updateActivity, loadActivity } = activityStore;\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then(a => {\r\n                if (a) setActivity(new ActivityFormValues(a));\r\n            });\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    const handleFormSubmit = (values: ActivityFormValues) => {\r\n        if (id) {\r\n            updateActivity(values)\r\n                .then(() => history.push(`/activities/${values.id}`));\r\n        } else {\r\n            const id = uuid();\r\n            createActivity({ ...values, id })\r\n                .then(() => history.push(`/activities/${id}`));\r\n        }\r\n    }\r\n    \r\n    if (initialLoading) return <Loading />\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Title is required'),\r\n        description: Yup.string().required('Description is required'),\r\n        category: Yup.string().required('Category is required'),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required('City is required'),\r\n        venue: Yup.string().required('Venue is required'),\r\n    });\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} name='description' placeholder='Description' />\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput name='city' placeholder='City' />\r\n                        <MyTextInput name='venue' placeholder='Venue' />\r\n\r\n                        <Button loading={isSubmitting} disabled={!isValid || isSubmitting || !dirty } floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to={id ? `/activities/${id}` : '/activities'} floated='right' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityForm);","import { Field, FieldProps, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react';\r\nimport {Segment, Header, Comment, Form, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nfunction ActivityDetailedChat({activityId} : Props) {\r\n\r\n    const {commentStore: { comments, clearComments, createHubConnection, addComment }} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            createHubConnection(activityId);\r\n        }\r\n\r\n        return () => clearComments()\r\n    }, [ activityId, createHubConnection, clearComments ]);\r\n    \r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n\r\n                    <Formik \r\n                        onSubmit={(values, { resetForm }) => \r\n                            addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, Shift + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) return;\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                    {comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as='a'>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat);","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/Activity';\r\nimport { store } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n\r\n    const {activityStore: { updateAttendance, loading }} = store;\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} \r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>{activity.host?.displayName}</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'} \r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={() => updateAttendance(activity.id)}\r\n                            loading={loading}\r\n                            disabled={loading}\r\n                        />\r\n                        <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        disabled={loading}\r\n                        loading={loading} \r\n                        onClick={() => updateAttendance(activity.id)}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={loading}\r\n                        loading={loading} \r\n                        onClick={() => updateAttendance(activity.id)} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/Activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/Activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nfunction ActivityDetailedSidebar ({ activity }: Props) {\r\n    if (!activity.profiles) return null;\r\n    \r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {activity.profiles.length} People Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {activity.profiles.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.username === activity.hostUsername && (<Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>)}\r\n                            <Image size='tiny' src={'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`#`}>{attendee.username}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                    {/* <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item> */}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(ActivityDetailedSidebar);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport Loading from '../../../app/layout/Loading';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nfunction ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const { selectedActivity: activity, loadActivity, initialLoading, clearSelectedActivity} = activityStore;\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n    \r\n    useEffect(() => {\r\n        loadActivity(id);\r\n\r\n        return () => clearSelectedActivity();\r\n    }, [loadActivity, id, clearSelectedActivity]);\r\n    \r\n    if (!activity || initialLoading) return <Loading />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDetails);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const {modalStore: { modal, closeModal }} = useStore();\r\n    \r\n    return (\r\n        <Modal open={modal.open} onClose={closeModal}>\r\n            <Modal.Content>\r\n                {modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default observer(ModalContainer);","import { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from \"../../app/models/Profile\";\r\n\r\nconst panes = [\r\n  { menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n  { menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n  { menuItem: \"Hosting\", pane: { key: \"hosting\" } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore();\r\n\r\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\r\n    profileStore;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username,\r\n      panes[data.activeIndex as number].pane.key\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign=\"center\">\r\n                    <div>{format(new Date(activity.date), \"do LLL\")}</div>\r\n                    <div>{format(new Date(activity.date), \"h:mm a\")}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nfunction ProfileFollowings() {\r\n    \r\n    const {profileStore} = useStore();\r\n\r\n    const { profile, followings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? \r\n                            `People following ${profile?.displayName}` \r\n                            :\r\n                            `People ${profile?.displayName} following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>            \r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileFollowings);","import { Cropper } from \"react-cropper\";\r\n\r\ninterface Props {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default PhotoWidgetCropper;","import {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  setFiles: (file: any) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({setFiles} : Props) {\r\n\r\n    const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n      borderColor: 'green'\r\n    }\r\n  \r\n    const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(acceptedFiles.map((file: any) => Object.assign(file, { preview: URL.createObjectURL(file) })));\r\n    }, [setFiles])\r\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n    \r\n      return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n          <input {...getInputProps()} />\r\n          <Icon name='upload' size='huge' />\r\n          <Header content='Drop image here' />\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    setAddPhotoMode: (state: boolean) => void;\r\n}\r\n\r\nfunction PhotoUploadWidget({ setAddPhotoMode }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const {profileStore: { uploading, uploadPhoto }} = useStore();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas()\r\n                .toBlob(blob => uploadPhoto(blob!)\r\n                .then(() => setAddPhotoMode(false)));\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}></div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={uploading} disabled={uploading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={uploading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(PhotoUploadWidget);","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/Profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfilePhotos({profile} : Props) {\r\n\r\n    const {profileStore: { isCurrentUser, loading, setMainPhoto, deletePhoto }} = useStore();\r\n\r\n    const [ addPhotoMode, setAddPhotoMode ] = useState(false);\r\n\r\n    const [targetId, setTargetId] = useState<string | null>(null);\r\n    \r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTargetId(event.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    async function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTargetId(event.currentTarget.name);\r\n        await deletePhoto(photo);\r\n    }\r\n    \r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    \r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget setAddPhotoMode={setAddPhotoMode}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic={!photo.isMain}\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain || (targetId?.includes(photo.id) && loading)}\r\n                                                loading={'main' + photo.id === targetId && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain || (targetId?.includes(photo.id) && loading)}\r\n                                                loading={targetId === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/Profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n  const { profileStore } = useStore();\r\n  const { setActiveTab } = profileStore;\r\n\r\n  const panes = [\r\n    { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n    { menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} /> },\r\n    { menuItem: \"Event\", render: () => <ProfileActivities /> },\r\n    { menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n    { menuItem: \"Following\", render: () => <ProfileFollowings /> },\r\n  ];\r\n\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition=\"right\"\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default observer(ProfileContent);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/Profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile?.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={4}>\r\n                    <StatisticGroup widths={2}>\r\n                        <Statistic label='Followers' value={profile?.followersCount} />\r\n                        <Statistic label='Following' value={profile?.followingCount} />\r\n                    </StatisticGroup>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileHeader);","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport Loading from \"../../app/layout/Loading\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nfunction ProfilePage() {\r\n\r\n    const {username} = useParams<{ username: string }>();\r\n\r\n    const {profileStore: { loadProfile, initialLoading, profile, setActiveTab }} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (username) loadProfile(username);\r\n\r\n        return () => setActiveTab(0);\r\n    }, [username, loadProfile, setActiveTab]);\r\n\r\n    if (initialLoading) return <Loading  content='Loading profile...' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader profile={profile!} />\r\n                <ProfileContent profile={profile!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePage);","import {\r\n  Redirect,\r\n  Route,\r\n  RouteComponentProps,\r\n  RouteProps,\r\n} from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n  component:\r\n    | React.ComponentType<RouteComponentProps<any>>\r\n    | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n  const {\r\n    userStore: { isLoggedIn },\r\n  } = useStore();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import { Container } from \"semantic-ui-react\";\nimport NavBar from \"./layout/NavBar\";\nimport ActivityDashboard from \"../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport { Route, useLocation } from \"react-router-dom\";\nimport HomePage from \"../features/home/HomePage\";\nimport ActivityForm from \"../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../features/activities/details/ActivityDetails\";\nimport { useStore } from \"./stores/store\";\nimport { useEffect } from \"react\";\nimport Loading from \"./layout/Loading\";\nimport ModalContainer from \"./common/modals/ModalContainer\";\nimport ProfilePage from \"../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./layout/PrivateRoute\";\n\nfunction App() {\n  const { key } = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFbLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded) return <Loading content=\"App loading...\" />;\n\n  return (\n    <>\n      <ModalContainer />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route\n        path=\"/(.+)\"\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <PrivateRoute\n                exact\n                path=\"/activities\"\n                component={ActivityDashboard}\n              />\n              <PrivateRoute\n                path=\"/activities/:id\"\n                component={ActivityDetails}\n              />\n              <PrivateRoute\n                path=\"/profiles/:username\"\n                component={ProfilePage}\n              />\n              <PrivateRoute\n                key={key}\n                path={[\"/createActivity\", \"/manage/:id\"]}\n                component={ActivityForm}\n              />\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { store, StoreContext } from \"./app/stores/store\";\nimport { Router } from \"react-router-dom\";\nimport \"./app/layout/styles.css\";\nimport \"cropperjs/dist/cropper.css\";\nimport { createBrowserHistory } from \"history\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}