{"version":3,"sources":["app/models/Pagination.ts","app/api/agent.ts","app/models/Activity.ts","app/models/Profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/Loading.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","features/errors/ValidationErrors.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerErrorUi.tsx","app/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PaginationParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","response","use","a","headers","JSON","parse","console","log","Promise","reject","error","status","config","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","Object","values","forEach","startsWith","store","userStore","logout","commonStore","setServerError","request","token","Authorization","withCredentials","getResponseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMain","photoId","deletePhoto","toggleFollowing","getFollowingsOrFollowers","predicate","listActivities","Activity","init","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","user","displayName","image","ActivityStore","activityRegistry","Map","initialLoading","selectedActivity","loading","paginationParams","set","setPaginationParams","setPredicate","key","value","clearPredicates","loadActivities","setInitialLoading","axiosParams","result","setActivity","setPagination","Date","isHost","hostUsername","isGoing","profiles","some","p","host","find","loadActivity","has","runInAction","state","setSelectedActivity","selectActivity","unselectActivity","setLoading","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","isCancelled","filter","newAttendee","clearSelectedActivity","updateAttendeeFollowing","following","profile","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","sort","b","getTime","grouped","format","entries","ProfilesStore","uploading","followings","followersLoading","activeTab","userActivities","loadingActivities","setActiveTab","tab","loadProfile","photo","photos","isMain","setImage","setMainPhoto","activityStore","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimer","processNewUser","modalStore","closeModal","window","FB","loginWithFbToken","catch","err","finally","authResponse","scope","getFbLoginStatus","getLoginStatus","setToken","getUser","startRefreshTokenTimer","stopRefreshTokenTimer","jwtPayload","atob","split","timeout","exp","now","setTimeout","clearTimeout","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","disabled","Card","Header","extra","Icon","attendees","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","Description","secondary","clearing","floated","groupedActivites","activities","sub","divided","vertical","marginTop","active","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingMore","setLoadingMore","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","LoginForm","validationSchema","Yup","email","required","password","initialValues","onSubmit","setErrors","handleSubmit","isValid","isSubmitting","className","autoComplete","placeholder","type","render","RegisterForm","dirty","isLoggedIn","Divider","Loading","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","Extra","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","setAddPhotoMode","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","targetId","setTargetId","event","currentTarget","includes","handleSetMainPhoto","handleDeletePhoto","menuPosition","StatisticGroup","Statistic","followingCount","PrivateRoute","Component","component","rest","ValidationErrors","Message","MessageList","i","TestErrors","baseUrl","primary","NotFound","Inline","message","useLocation","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ProfilePage","ActivityForm","ServerErrorUi","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d6cca6e6.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number,\r\n    itemsPerPage: number,\r\n    totalItems: number,\r\n    totalPages: number\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PaginationParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/Activity';\r\nimport { PaginatedResult } from '../models/Pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/Profile';\r\nimport { User, UserFormValues } from '../models/User';\r\nimport { store } from '../stores/store';\r\n\r\nfunction sleep (delay: number) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.response.use(async response => {\r\n    try {\r\n        if (process.env.NODE_ENV === 'development') await sleep(500);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return await Promise.reject(error);\r\n    }\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n\r\n    switch (status) {\r\n        case 400: {\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n                return;\r\n            }\r\n            \r\n            if (config.method === 'get' && data.errors && data.errors.hasOwnProperty('id')) {\r\n                // In case: GET /api/activities/notaguid\r\n                history.push('/not-found');\r\n                return;\r\n            }\r\n            \r\n            if (data && data.errors) {\r\n                // Flat validation errors\r\n                let modalStateErrors: string[] = [];\r\n                Object.values(data.errors).forEach((errors: any)=> {\r\n                    for (let error of errors) modalStateErrors.push(error);\r\n                });\r\n                throw modalStateErrors;\r\n            } \r\n            break;\r\n        }\r\n        case 401: {\r\n            if (headers['www-authenticate'] && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - Please login again');\r\n            }\r\n            break;\r\n        }\r\n        case 404: {\r\n            history.push('/not-found');\r\n            break;\r\n        }\r\n        case 500: {\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    config.withCredentials = true;\r\n    return config;\r\n})\r\n\r\nconst getResponseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(getResponseBody),\r\n    post: <T> (url: string, body = {}) => axios.post<T>(url, body).then(getResponseBody),\r\n    put: <T> (url: string, body = {}) => axios.put<T>(url, body).then(getResponseBody),\r\n    delete: <T> (url: string) => axios.delete(url).then<T>(getResponseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(getResponseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`)\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (values: UserFormValues) => requests.post<User>('/account/login', values),\r\n    register: (values: UserFormValues) => requests.post<User>('/account/register', values),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();   \r\n        formData.append('File', file);\r\n        return axios.post<Photo>('/photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        });\r\n    },\r\n    setMain: (photoId: string) => requests.post(`/photos/${photoId}/setmain`),\r\n    deletePhoto: (photoId: string) => requests.delete(`/photos/${photoId}`),\r\n    toggleFollowing: (username: string) => requests.post(`/follow/${username}`),\r\n    getFollowingsOrFollowers: (username: string, predicate: \"following\" | \"followers\") => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean,\r\n    isHost: boolean,\r\n    host?: Profile,\r\n    profiles: Profile[]\r\n} \r\n\r\nexport class Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./User\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    bio?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n    following: boolean;\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/Activity\";\r\nimport { Pagination, PaginationParams } from \"../models/Pagination\";\r\nimport { Profile } from \"../models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map<string, Activity>();\r\n    initialLoading = false;\r\n    selectedActivity: Activity | undefined = undefined;\r\n    loading = false;\r\n    pagination: Pagination | null = null;\r\n    paginationParams = new PaginationParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.paginationParams = new PaginationParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPaginationParams = (params: PaginationParams) => {\r\n        this.paginationParams = params;\r\n    }\r\n\r\n    setPredicate = (key: string, value: string | Date) => {\r\n        const clearPredicates = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        }\r\n        \r\n        switch (key) {\r\n            case 'all':\r\n                clearPredicates();\r\n                this.predicate.set('all', value);\r\n                break;\r\n            case 'isHost':\r\n                clearPredicates();\r\n                this.predicate.set('isHost', value);\r\n                break;\r\n            case 'isGoing':\r\n                clearPredicates();\r\n                this.predicate.set('isGoing', value);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate'); // detect changes by key\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageSize', this.paginationParams.pageSize.toString());\r\n        params.append('pageNumber', this.paginationParams.pageNumber.toString());\r\n\r\n        if (!this.predicate.has('all')) {\r\n            if (this.predicate.has('isHost')) params.append('ishost', this.predicate.get('isHost').toString());\r\n\r\n            else if (this.predicate.has('isGoing')) params.append('isgoing', this.predicate.get('isGoing').toString());\r\n        }\r\n\r\n        if (this.predicate.has('startDate')) params.append('startdate', (this.predicate.get('startDate') as Date).toISOString());\r\n        \r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate () {\r\n        return Array.from(this.activityRegistry.values())\r\n                .sort((a, b) => b.date!.getTime() - a.date!.getTime());\r\n    }\r\n\r\n    get groupedActivites () {\r\n        const grouped: {[key: string]: Activity[]} = {};\r\n\r\n        Array.from(this.activityRegistry.values()).forEach(activity => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');            \r\n            if (!grouped[date]) grouped[date] = [];\r\n            grouped[date].push(activity);\r\n        });\r\n\r\n        return Object.entries(grouped)\r\n                    .sort((a, b) => Date.parse(b[0]) - Date.parse(a[0]));\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setInitialLoading(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(a => this.setActivity(a));\r\n            this.setPagination(result.pagination);\r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    setPagination(pagination: Pagination) {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setActivity = (activity: Activity) => {\r\n        activity.date = new Date(activity.date!);\r\n        \r\n        const user = store.userStore.user;;\r\n        if (user) {\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.isGoing = activity.profiles?.some(p => p.username === user.username);\r\n            activity.host = activity.profiles?.find(p => p.username === activity.hostUsername);\r\n        }\r\n        \r\n\r\n        this.activityRegistry.set(activity.id, activity);\r\n        return activity;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        if (this.activityRegistry.has(id)) {\r\n            this.selectedActivity = this.activityRegistry.get(id);\r\n            return this.selectedActivity;\r\n        }\r\n        \r\n        try {\r\n            this.setInitialLoading(true);\r\n            const activity = await agent.Activities.details(id);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = this.setActivity(activity);\r\n            })\r\n\r\n            return activity;\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    setInitialLoading = (state: boolean) => {\r\n        this.initialLoading = state;\r\n    }\r\n\r\n    private setSelectedActivity = (activity: Activity | undefined) => {\r\n        this.selectedActivity = activity;\r\n    }\r\n\r\n    selectActivity = (id: string) => {\r\n        this.setSelectedActivity(this.activityRegistry.get(id));\r\n    }\r\n\r\n    unselectActivity = () => {\r\n        this.setSelectedActivity(undefined);\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity)\r\n            newActivity.hostUsername = user?.username!;\r\n            newActivity.isHost = true;\r\n            newActivity.host = attendee;\r\n            newActivity.profiles = [attendee];\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id!, newActivity);\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                Object.assign(this.selectedActivity, activity);\r\n                this.activityRegistry.set(activity.id!, this.selectedActivity!);\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(id);\r\n\r\n            runInAction(() => {\r\n                const user = store.userStore.user;\r\n                if (!user || !this.selectedActivity) return;\r\n\r\n                if (this.selectedActivity.isHost) {\r\n                    // cancel or uncancel\r\n                    this.selectedActivity.isCancelled = !this.selectedActivity.isCancelled;\r\n                    this.activityRegistry.set(id, this.selectedActivity);\r\n                } else if (this.selectedActivity.isGoing) {\r\n                    // leave activty \r\n                    this.selectedActivity.profiles = this.selectedActivity.profiles?.filter(\r\n                        p => p.username !== user.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    // join activity \r\n                    const newAttendee = new Profile(user);\r\n                    this.selectedActivity.profiles?.push(newAttendee);\r\n                    this.selectedActivity.isGoing = true;\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string, following: boolean) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.profiles.forEach(profile => {\r\n                if (profile.username === username) {\r\n                    profile.following = following;\r\n                    following ? profile.followersCount++ : profile.followersCount--;\r\n                }\r\n            })\r\n        });\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfilesStore {\r\n    profile: Profile | null = null;\r\n    loading = false;\r\n    uploading = false;\r\n    initialLoading = false;\r\n    followings: Profile[] = []; // either followings or followers\r\n    followersLoading = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.getFollowingsOrFollowers(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;   \r\n    }\r\n\r\n    setActiveTab = (tab: any) => {\r\n        this.activeTab = tab;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.initialLoading = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile);\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.initialLoading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                this.profile?.photos?.push(photo);\r\n                if (photo.isMain) store.userStore.setImage(photo.url);\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMain(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos && store.userStore.user) {\r\n                    store.userStore.setImage(photo.url);\r\n                    this.profile.image = photo.url;\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            \r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    toggleFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.toggleFollowing(username);\r\n            \r\n            store.activityStore.updateAttendeeFollowing(username, following);\r\n            \r\n            runInAction(() => {\r\n\r\n                if (this.profile?.username !== store.userStore.user?.username) {\r\n                    if (this.profile?.username === username) {\r\n                        this.profile.following = following;\r\n                        following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    }\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === store.userStore.user?.username) {\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                    }\r\n\r\n                    if (profile.username === username) {\r\n                        profile.following = following;\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                    }\r\n                });\r\n            })\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    getFollowingsOrFollowers = async (predicate: \"following\" | \"followers\") => {\r\n        if (!this.profile) return;\r\n\r\n        this.followersLoading = true;\r\n\r\n        try {\r\n            const profiles = await agent.Profiles.getFollowingsOrFollowers(this.profile.username, predicate);\r\n            \r\n            runInAction(() => {\r\n                switch (predicate) {\r\n                    case \"followers\":\r\n                        this.followings = profiles;\r\n                        break;\r\n                    case \"following\":\r\n                        this.followings = profiles;\r\n                        break;\r\n                }\r\n            })\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.followersLoading = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const userActivities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => this.userActivities = userActivities);\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimer: any = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (values: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(values);\r\n            this.processNewUser(user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    fbLogin = async () => {\r\n        if (!window.FB) return;\r\n\r\n        this.fbLoading = true;\r\n\r\n        const loginWithFbToken = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                this.processNewUser(user);\r\n                history.push('/activities');\r\n            }).catch(err => {\r\n                console.error(err);\r\n                throw err;\r\n            }).finally(() => {\r\n                this.fbLoading = false;\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            // https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus/\r\n            // The user is logged into Facebook and has authorized your application\r\n            loginWithFbToken(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                loginWithFbToken(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'});\r\n        }\r\n    }\r\n\r\n    getFbLoginStatus = async () => {\r\n        window.FB && window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        });\r\n    }\r\n\r\n    register = async (values: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(values);\r\n            this.processNewUser(user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            this.processNewUser(user);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image; \r\n    }\r\n\r\n    refreshToken = async () => {\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            this.processNewUser(user);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    \r\n    startRefreshTokenTimer = (user: User) => {\r\n        this.stopRefreshTokenTimer();\r\n\r\n        const jwtPayload = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtPayload.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - 60*1000; // 30 seconds before expired\r\n        this.refreshTokenTimer = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    stopRefreshTokenTimer = () => {\r\n        if (!this.refreshTokenTimer) return;\r\n\r\n        clearTimeout(this.refreshTokenTimer);\r\n    }\r\n\r\n    private processNewUser = (user: User) => {\r\n        store.commonStore.setToken(user.token);\r\n        runInAction(() => this.user = user);\r\n        this.startRefreshTokenTimer(user);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfilesStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore,\r\n    userStore: UserStore,\r\n    commonStore: CommonStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfilesStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    userStore: new UserStore(),\r\n    commonStore: new CommonStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfilesStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/ServerError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setToken = (token : string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/Comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start()\r\n                .catch(err => console.error(\"Err while establishing connection to chat hub: \", err));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => comment.createdAt = new Date(comment.createdAt + 'Z'))\r\n                    this.comments = comments\r\n                });\r\n            });\r\n            \r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop()\r\n            .catch(err => console.error('Err stopping chat hub connection: ', err));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.stopHubConnection();\r\n        this.comments = [];\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n} ","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nfunction NavBar() {\r\n    const {userStore: { user, logout }} = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }}/>\r\n                    Reactivites\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default observer(NavBar);","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/Profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction FollowButton({profile}: Props) {\r\n\r\n    const {userStore, profileStore} = useStore();\r\n\r\n    const {user} = userStore;\r\n    const {toggleFollowing, loading} = profileStore;\r\n\r\n    if (user?.username === profile?.username) return null;\r\n\r\n    function handleClick(e: SyntheticEvent) {\r\n        e.preventDefault();\r\n        toggleFollowing(profile.username, !profile.following);\r\n    }\r\n    \r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile?.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button \r\n                    basic\r\n                    fluid\r\n                    onClick={handleClick}\r\n                    loading={loading}\r\n                    disabled={loading}\r\n                    color={profile?.following ? 'red' : 'green'} \r\n                    content={profile?.following ? 'Unfollow' : 'Follow'} />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n}\r\n\r\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/Profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileCard({ profile }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Header>Bio goes here</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile?.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/Profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    };\r\n    \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                src={attendee.image || '/assets/user.png'}  />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee);","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/Activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityListItem({activity} : Props) {\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' \r\n                            circular src={activity?.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by {activity.hostUsername}</Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>    \r\n                </Item.Group>                \r\n            </Segment>\r\n\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.profiles!} />\r\n            </Segment>\r\n\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n\r\nexport default ActivityListItem;","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header, Item, Segment } from 'semantic-ui-react';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupedActivites } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivites.map(([ date, activities ]) => (\r\n                <Fragment key={date}>\r\n                    <Header sub color='teal'>\r\n                        {date}\r\n                    </Header>\r\n                    <Segment>\r\n                        <Item.Group divided>\r\n                            {activities.map((activity) => (\r\n                                <ActivityListItem key={activity.id} activity={activity}/>\r\n                            ))}\r\n                        </Item.Group>\r\n                    </Segment>\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityList);","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nfunction ActivityFilters() {\r\n\r\n    const {activityStore: { predicate, setPredicate }} = useStore();\r\n    \r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 27}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item  \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                    content='All Activities' />\r\n                <Menu.Item  \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                    content=\"I'm going\" />\r\n                <Menu.Item  \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    content=\"I'm hosting\" />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityFilters);","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PaginationParams } from '../../../app/models/Pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nfunction ActivityDashboard() {\r\n\r\n    const { activityStore  } = useStore();\r\n    const { loadActivities, activityRegistry, pagination, setPaginationParams } = activityStore;\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    \r\n    useEffect(() => { \r\n        if (activityRegistry.size < 2) {\r\n            loadActivities();\r\n        }\r\n    }, [loadActivities, activityRegistry]);\r\n\r\n    function handleLoadMore() {\r\n        setLoadingMore(true);\r\n        setPaginationParams(new PaginationParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingMore(false));\r\n    }\r\n  \r\n    // if (activityStore.initialLoading && !loadingMore) return <Loading />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                {activityStore.initialLoading && !loadingMore ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleLoadMore}\r\n                        hasMore={!loadingMore && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingMore} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nfunction MyTextInput(props: Props) {\r\n    const [ field, meta ] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Formik } from 'formik';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction LoginForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().required('Email is required').email('Invalid email'),\r\n        password: Yup.string().required('Password is required'),\r\n    });\r\n    \r\n    return (\r\n        <Formik \r\n            validationSchema={validationSchema} \r\n            initialValues={{ email: '', password: '', error: null }} \r\n            onSubmit={(values, {setErrors}) => userStore\r\n                .login(values)\r\n                .catch(e => setErrors({ error: 'Invalid email or password' })) }\r\n        >\r\n            {({ handleSubmit, isValid, touched, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n                    <ErrorMessage  name='error' render={() => (\r\n                        <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />\r\n                    )} />\r\n                    <Button \r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !touched || isSubmitting} \r\n                        positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import { Formik } from 'formik';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction RegisterForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().required('Email is required').email('Invalid email'),\r\n        password: Yup.string().required('Password is required'),\r\n        displayName: Yup.string().required('Display name is required'),\r\n        username: Yup.string().required('Username is required'),\r\n    });\r\n    \r\n    return (\r\n        <Formik \r\n            validationSchema={validationSchema} \r\n            initialValues={{ email: '', password: '', username: '', displayName: '', error: null }} \r\n            onSubmit={(values, {setErrors}) => userStore\r\n                .register(values)\r\n                .catch(error => setErrors({ error })) }\r\n        >\r\n            {({ handleSubmit, isValid, dirty, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\"/>\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\"/>\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n\r\n                    {/*\r\n                    TODO: Display validation errors\r\n                     <ErrorMessage name='error' render={() => (\r\n                        <ValidationErrors errors={errors.error} />\r\n                    )} /> */}\r\n                    \r\n                    <Button \r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Header,\r\n  Segment,\r\n  Image,\r\n  Button,\r\n  Divider,\r\n} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nfunction HomePage() {\r\n  const {\r\n    userStore,\r\n    modalStore: { openModal },\r\n  } = useStore();\r\n\r\n  return (\r\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n      <Container text>\r\n        <Header as=\"h1\" inverted>\r\n          <Image\r\n            size=\"massive\"\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n          Reactivities\r\n        </Header>\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n              Take me Activities\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              onClick={() => openModal(<LoginForm />)}\r\n              size=\"huge\"\r\n              inverted\r\n            >\r\n              Login\r\n            </Button>\r\n            <Button\r\n              onClick={() => openModal(<RegisterForm />)}\r\n              size=\"huge\"\r\n              inverted\r\n            >\r\n              Register\r\n            </Button>\r\n            <Divider horizontal inverted>\r\n              Or\r\n            </Divider>\r\n            <Button\r\n              size=\"huge\"\r\n              inverted\r\n              color=\"facebook\"\r\n              content=\"Login With Facebook\"\r\n              loading={userStore.fbLoading}\r\n              onClick={userStore.fbLogin}\r\n            />\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default observer(HomePage);\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nfunction Loading({ inverted=true, content='Loading...' } : Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n}\r\n\r\nexport default Loading;","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextArea(props: Props) {\r\n    const [ field, meta ] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextArea;","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nfunction MySelectInput(props: Props) {\r\n    const [ field, meta, helpers ] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from \"formik\";\r\nimport ReactDatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\nfunction MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [ field, meta, helpers ] = useField(props.name!);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <ReactDatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color='red' content={meta.error} />\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyDateInput;","import {useState, useEffect} from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, Formik } from 'formik';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport { ActivityFormValues } from '../../../app/models/Activity';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport Loading from '../../../app/layout/Loading';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\nfunction ActivityForm() {\r\n    \r\n    const { activityStore } = useStore();\r\n    const { initialLoading, createActivity, updateActivity, loadActivity } = activityStore;\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then(a => {\r\n                if (a) setActivity(new ActivityFormValues(a));\r\n            });\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    const handleFormSubmit = (values: ActivityFormValues) => {\r\n        if (id) {\r\n            updateActivity(values)\r\n                .then(() => history.push(`/activities/${values.id}`));\r\n        } else {\r\n            const id = uuid();\r\n            createActivity({ ...values, id })\r\n                .then(() => history.push(`/activities/${id}`));\r\n        }\r\n    }\r\n    \r\n    if (initialLoading) return <Loading />\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Title is required'),\r\n        description: Yup.string().required('Description is required'),\r\n        category: Yup.string().required('Category is required'),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required('City is required'),\r\n        venue: Yup.string().required('Venue is required'),\r\n    });\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} name='description' placeholder='Description' />\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput name='city' placeholder='City' />\r\n                        <MyTextInput name='venue' placeholder='Venue' />\r\n\r\n                        <Button loading={isSubmitting} disabled={!isValid || isSubmitting || !dirty } floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to={id ? `/activities/${id}` : '/activities'} floated='right' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityForm);","import { Field, FieldProps, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react';\r\nimport {Segment, Header, Comment, Form, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nfunction ActivityDetailedChat({activityId} : Props) {\r\n\r\n    const {commentStore: { comments, clearComments, createHubConnection, addComment }} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            createHubConnection(activityId);\r\n        }\r\n\r\n        return () => clearComments()\r\n    }, [ activityId, createHubConnection, clearComments ]);\r\n    \r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n\r\n                    <Formik \r\n                        onSubmit={(values, { resetForm }) => \r\n                            addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, Shift + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) return;\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                    {comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as='a'>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat);","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/Activity';\r\nimport { store } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n\r\n    const {activityStore: { updateAttendance, loading }} = store;\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} \r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>{activity.host?.displayName}</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'} \r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={() => updateAttendance(activity.id)}\r\n                            loading={loading}\r\n                            disabled={loading}\r\n                        />\r\n                        <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        disabled={loading}\r\n                        loading={loading} \r\n                        onClick={() => updateAttendance(activity.id)}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={loading}\r\n                        loading={loading} \r\n                        onClick={() => updateAttendance(activity.id)} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/Activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/Activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nfunction ActivityDetailedSidebar ({ activity }: Props) {\r\n    if (!activity.profiles) return null;\r\n    \r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {activity.profiles.length} People Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {activity.profiles.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.username === activity.hostUsername && (<Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>)}\r\n                            <Image size='tiny' src={'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`#`}>{attendee.username}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                    {/* <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='tiny' src={'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item> */}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(ActivityDetailedSidebar);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport Loading from '../../../app/layout/Loading';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nfunction ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const { selectedActivity: activity, loadActivity, initialLoading, clearSelectedActivity} = activityStore;\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n    \r\n    useEffect(() => {\r\n        loadActivity(id);\r\n\r\n        return () => clearSelectedActivity();\r\n    }, [loadActivity, id, clearSelectedActivity]);\r\n    \r\n    if (!activity || initialLoading) return <Loading />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDetails);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const {modalStore: { modal, closeModal }} = useStore();\r\n    \r\n    return (\r\n        <Modal open={modal.open} onClose={closeModal}>\r\n            <Modal.Content>\r\n                {modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default observer(ModalContainer);","import { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from \"../../app/models/Profile\";\r\n\r\nconst panes = [\r\n  { menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n  { menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n  { menuItem: \"Hosting\", pane: { key: \"hosting\" } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore();\r\n\r\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\r\n    profileStore;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username,\r\n      panes[data.activeIndex as number].pane.key\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign=\"center\">\r\n                    <div>{format(new Date(activity.date), \"do LLL\")}</div>\r\n                    <div>{format(new Date(activity.date), \"h:mm a\")}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nfunction ProfileFollowings() {\r\n    \r\n    const {profileStore} = useStore();\r\n\r\n    const { profile, followings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? \r\n                            `People following ${profile?.displayName}` \r\n                            :\r\n                            `People ${profile?.displayName} following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>            \r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileFollowings);","import { Cropper } from \"react-cropper\";\r\n\r\ninterface Props {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default PhotoWidgetCropper;","import {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  setFiles: (file: any) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({setFiles} : Props) {\r\n\r\n    const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n      borderColor: 'green'\r\n    }\r\n  \r\n    const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(acceptedFiles.map((file: any) => Object.assign(file, { preview: URL.createObjectURL(file) })));\r\n    }, [setFiles])\r\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n    \r\n      return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n          <input {...getInputProps()} />\r\n          <Icon name='upload' size='huge' />\r\n          <Header content='Drop image here' />\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    setAddPhotoMode: (state: boolean) => void;\r\n}\r\n\r\nfunction PhotoUploadWidget({ setAddPhotoMode }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const {profileStore: { uploading, uploadPhoto }} = useStore();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas()\r\n                .toBlob(blob => uploadPhoto(blob!)\r\n                .then(() => setAddPhotoMode(false)));\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}></div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={uploading} disabled={uploading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={uploading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(PhotoUploadWidget);","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/Profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfilePhotos({profile} : Props) {\r\n\r\n    const {profileStore: { isCurrentUser, loading, setMainPhoto, deletePhoto }} = useStore();\r\n\r\n    const [ addPhotoMode, setAddPhotoMode ] = useState(false);\r\n\r\n    const [targetId, setTargetId] = useState<string | null>(null);\r\n    \r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTargetId(event.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    async function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTargetId(event.currentTarget.name);\r\n        await deletePhoto(photo);\r\n    }\r\n    \r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    \r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget setAddPhotoMode={setAddPhotoMode}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic={!photo.isMain}\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain || (targetId?.includes(photo.id) && loading)}\r\n                                                loading={'main' + photo.id === targetId && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain || (targetId?.includes(photo.id) && loading)}\r\n                                                loading={targetId === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/Profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n  const { profileStore } = useStore();\r\n  const { setActiveTab } = profileStore;\r\n\r\n  const panes = [\r\n    { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n    { menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} /> },\r\n    { menuItem: \"Event\", render: () => <ProfileActivities /> },\r\n    { menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n    { menuItem: \"Following\", render: () => <ProfileFollowings /> },\r\n  ];\r\n\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition=\"right\"\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default observer(ProfileContent);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/Profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile?.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={4}>\r\n                    <StatisticGroup widths={2}>\r\n                        <Statistic label='Followers' value={profile?.followersCount} />\r\n                        <Statistic label='Following' value={profile?.followingCount} />\r\n                    </StatisticGroup>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileHeader);","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport Loading from \"../../app/layout/Loading\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nfunction ProfilePage() {\r\n\r\n    const {username} = useParams<{ username: string }>();\r\n\r\n    const {profileStore: { loadProfile, initialLoading, profile, setActiveTab }} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (username) loadProfile(username);\r\n\r\n        return () => setActiveTab(0);\r\n    }, [username, loadProfile, setActiveTab]);\r\n\r\n    if (initialLoading) return <Loading  content='Loading profile...' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader profile={profile!} />\r\n                <ProfileContent profile={profile!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePage);","import {\r\n  Redirect,\r\n  Route,\r\n  RouteComponentProps,\r\n  RouteProps,\r\n} from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n  component:\r\n    | React.ComponentType<RouteComponentProps<any>>\r\n    | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n  const {\r\n    userStore: { isLoggedIn },\r\n  } = useStore();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import { Message, MessageList } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  errors: string[];\r\n}\r\n\r\nfunction ValidationErrors({ errors }: Props) {\r\n  return (\r\n    <Message error>\r\n      {errors && (\r\n        <MessageList>\r\n          {errors.map((err: any, i: number) => (\r\n            <Message.Item key={i}>{err}</Message.Item>\r\n          ))}\r\n        </MessageList>\r\n      )}\r\n    </Message>\r\n  );\r\n}\r\n\r\nexport default ValidationErrors;\r\n","import { useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n  const baseUrl = \"http://localhost:5000/api/\";\r\n\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  function handleNotFound() {\r\n    axios\r\n      .get(baseUrl + \"buggy/not-found\")\r\n      .catch((err) => console.log(err.response));\r\n  }\r\n\r\n  function handleBadRequest() {\r\n    axios.get(baseUrl + \"buggy/bad-request\").catch((err) => console.log(err));\r\n  }\r\n\r\n  function handleServerError() {\r\n    axios\r\n      .get(baseUrl + \"buggy/server-error\")\r\n      .catch((err) => console.log(err.response));\r\n  }\r\n\r\n  function handleUnauthorised() {\r\n    axios\r\n      .get(baseUrl + \"buggy/unauthorised\")\r\n      .catch((err) => console.log(err.response));\r\n  }\r\n\r\n  function handleBadGuid() {\r\n    axios.get(baseUrl + \"activities/notaguid\").catch((err) => setErrors(err));\r\n  }\r\n\r\n  function handleValidationError() {\r\n    axios.post(baseUrl + \"activities\", {}).catch((err) => setErrors(err));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header as=\"h1\" content=\"Test Error component\" />\r\n      <Segment>\r\n        <Button.Group widths=\"7\">\r\n          <Button onClick={handleNotFound} content=\"Not Found\" basic primary />\r\n          <Button\r\n            onClick={handleBadRequest}\r\n            content=\"Bad Request\"\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleValidationError}\r\n            content=\"Validation Error\"\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleServerError}\r\n            content=\"Server Error\"\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleUnauthorised}\r\n            content=\"Unauthorised\"\r\n            basic\r\n            primary\r\n          />\r\n          <Button onClick={handleBadGuid} content=\"Bad Guid\" basic primary />\r\n        </Button.Group>\r\n      </Segment>\r\n      {errors && errors.length ? <ValidationErrors errors={errors} /> : null}\r\n    </>\r\n  );\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name=\"search\" />\r\n        Page not found\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to=\"/activities\" primary>\r\n          Return to Activities Page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nfunction ServerErrorUi() {\r\n  const { commonStore } = useStore();\r\n\r\n  return (\r\n    <Container>\r\n      <Header as=\"h1\" content=\"Server Error\" />\r\n      <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\r\n      {commonStore.error?.details && (\r\n        <Segment>\r\n          <Header as=\"h4\" content=\"Stack trace\" color=\"teal\" />\r\n          <code style={{ marginTop: \"10px\" }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default observer(ServerErrorUi);\r\n","import { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./layout/NavBar\";\r\nimport ActivityDashboard from \"../features/activities/dashboard/ActivityDashboard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Route, Switch, useLocation } from \"react-router-dom\";\r\nimport HomePage from \"../features/home/HomePage\";\r\nimport ActivityForm from \"../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../features/activities/details/ActivityDetails\";\r\nimport { useStore } from \"./stores/store\";\r\nimport { useEffect } from \"react\";\r\nimport Loading from \"./layout/Loading\";\r\nimport ModalContainer from \"./common/modals/ModalContainer\";\r\nimport ProfilePage from \"../features/profiles/ProfilePage\";\r\nimport PrivateRoute from \"./layout/PrivateRoute\";\r\nimport TestErrors from \"../features/errors/TestErrors\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NotFound from \"../features/errors/NotFound\";\r\nimport ServerErrorUi from \"../features/errors/ServerErrorUi\";\r\n\r\nfunction App() {\r\n  const { key } = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFbLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if (!commonStore.appLoaded) return <Loading content=\"App loading...\" />;\r\n\r\n  return (\r\n    <>\r\n      <ModalContainer />\r\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route\r\n        path=\"/(.+)\"\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: \"7em\" }}>\r\n              <Switch>\r\n                <PrivateRoute\r\n                  exact\r\n                  path=\"/activities\"\r\n                  component={ActivityDashboard}\r\n                />\r\n                <PrivateRoute\r\n                  path=\"/activities/:id\"\r\n                  component={ActivityDetails}\r\n                />\r\n                <PrivateRoute\r\n                  path=\"/profiles/:username\"\r\n                  component={ProfilePage}\r\n                />\r\n                <PrivateRoute\r\n                  key={key}\r\n                  path={[\"/createActivity\", \"/manage/:id\"]}\r\n                  component={ActivityForm}\r\n                />\r\n                <Route path=\"/errors\" component={TestErrors} />\r\n                <Route path=\"/server-error\" component={ServerErrorUi} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./app/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { store, StoreContext } from \"./app/stores/store\";\r\nimport { Router } from \"react-router-dom\";\r\nimport \"./app/layout/styles.css\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}